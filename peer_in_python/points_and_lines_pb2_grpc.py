# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import points_and_lines_pb2 as points__and__lines__pb2


class PointsAndLinesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendBall = channel.unary_unary(
                '/transfers_graphics_protocol.PointsAndLines/sendBall',
                request_serializer=points__and__lines__pb2.PointAsBall.SerializeToString,
                response_deserializer=points__and__lines__pb2.Empty.FromString,
                )
        self.sendEllipsoid = channel.unary_unary(
                '/transfers_graphics_protocol.PointsAndLines/sendEllipsoid',
                request_serializer=points__and__lines__pb2.PointAsEllipsoid.SerializeToString,
                response_deserializer=points__and__lines__pb2.Empty.FromString,
                )
        self.sendLineWithPos = channel.unary_unary(
                '/transfers_graphics_protocol.PointsAndLines/sendLineWithPos',
                request_serializer=points__and__lines__pb2.LineWithPositions.SerializeToString,
                response_deserializer=points__and__lines__pb2.Empty.FromString,
                )
        self.sendLineWithIDs = channel.unary_unary(
                '/transfers_graphics_protocol.PointsAndLines/sendLineWithIDs',
                request_serializer=points__and__lines__pb2.LineWithIDs.SerializeToString,
                response_deserializer=points__and__lines__pb2.Empty.FromString,
                )
        self.sendTick = channel.unary_unary(
                '/transfers_graphics_protocol.PointsAndLines/sendTick',
                request_serializer=points__and__lines__pb2.TickMessage.SerializeToString,
                response_deserializer=points__and__lines__pb2.Empty.FromString,
                )


class PointsAndLinesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sendBall(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendEllipsoid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendLineWithPos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendLineWithIDs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendTick(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PointsAndLinesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendBall': grpc.unary_unary_rpc_method_handler(
                    servicer.sendBall,
                    request_deserializer=points__and__lines__pb2.PointAsBall.FromString,
                    response_serializer=points__and__lines__pb2.Empty.SerializeToString,
            ),
            'sendEllipsoid': grpc.unary_unary_rpc_method_handler(
                    servicer.sendEllipsoid,
                    request_deserializer=points__and__lines__pb2.PointAsEllipsoid.FromString,
                    response_serializer=points__and__lines__pb2.Empty.SerializeToString,
            ),
            'sendLineWithPos': grpc.unary_unary_rpc_method_handler(
                    servicer.sendLineWithPos,
                    request_deserializer=points__and__lines__pb2.LineWithPositions.FromString,
                    response_serializer=points__and__lines__pb2.Empty.SerializeToString,
            ),
            'sendLineWithIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.sendLineWithIDs,
                    request_deserializer=points__and__lines__pb2.LineWithIDs.FromString,
                    response_serializer=points__and__lines__pb2.Empty.SerializeToString,
            ),
            'sendTick': grpc.unary_unary_rpc_method_handler(
                    servicer.sendTick,
                    request_deserializer=points__and__lines__pb2.TickMessage.FromString,
                    response_serializer=points__and__lines__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'transfers_graphics_protocol.PointsAndLines', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PointsAndLines(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sendBall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfers_graphics_protocol.PointsAndLines/sendBall',
            points__and__lines__pb2.PointAsBall.SerializeToString,
            points__and__lines__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendEllipsoid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfers_graphics_protocol.PointsAndLines/sendEllipsoid',
            points__and__lines__pb2.PointAsEllipsoid.SerializeToString,
            points__and__lines__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendLineWithPos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfers_graphics_protocol.PointsAndLines/sendLineWithPos',
            points__and__lines__pb2.LineWithPositions.SerializeToString,
            points__and__lines__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendLineWithIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfers_graphics_protocol.PointsAndLines/sendLineWithIDs',
            points__and__lines__pb2.LineWithIDs.SerializeToString,
            points__and__lines__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendTick(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/transfers_graphics_protocol.PointsAndLines/sendTick',
            points__and__lines__pb2.TickMessage.SerializeToString,
            points__and__lines__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
